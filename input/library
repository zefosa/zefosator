#!/usr/bin/env bash

function create_dirs {
  set -e
  mkdir -p ${CACHE_DIR}/kernel-rpms
}

function download_kernel_sources {
  set -e
  echo "Downloading kernel source package..."
  pushd ${CACHE_DIR}/kernel-rpms
  if [ ! -f ${KERNEL_SRC_PKG} ]; then
    echo "Downloading: ${KERNEL_SRC_PKG}"
    if [ "$KRN_VENDOR" = "almalinux8" ]; then
      curl --fail -LO "${KERNEL_SRC_URL}"
    else
      curl --fail --no-progress-meter -LO "${KERNEL_SRC_URL}"
    fi
  fi
  popd
}

function prepare_kernel_sources {
  set -e
  echo "Initializing RPM build tree..."
  /usr/bin/rpmdev-setuptree
  rpm -Uvh "${CACHE_DIR}/kernel-rpms/${KERNEL_SRC_PKG}"
  echo "CONFIG_ZFS=y" >> "$(rpm --eval "%{_sourcedir}")/kernel-local"
  pushd "$(rpm --eval "%{_specdir}")"
  # error if there is no buildid pattern to replace
  grep "# define buildid .local" kernel.spec > /dev/null
  sed -i "s/# define buildid .local/%define buildid .zfs/" kernel.spec
  # extract + patch kernel sources
  /usr/bin/rpmbuild -bp kernel.spec
  popd

  # ~/rpmbuild/BUILD/kernel-6.11.11/linux-6.11.11-200.zfs.fc40.x86_64/
  pushd "$(rpm --eval "%{_builddir}")/kernel-${KRN_VERSION}/linux-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}"
  cp ./configs/kernel-${KRN_VERSION}-${KRN_ARCH}.config .config
  make prepare
  popd

  # ~/rpmbuild/BUILD/kernel-6.11.11
  pushd "$(rpm --eval "%{_builddir}")/kernel-${KRN_VERSION}"
  cp -r "linux-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" "linux-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.orig"
  popd
}

function prepare_zfs_sources {
  set -e
  pushd ${CACHE_DIR}
  if [ ! -d "${ZFS_GIT_TAG}" ]; then
    echo "Checking out ZFS sources..."
    if [ -z "${ZFS_GIT_CHERRY_PICK_COMMITS}" ]; then
      git clone --depth 1 --branch ${ZFS_GIT_TAG} ${ZFS_GITHUB_REPO} ${ZFS_GIT_TAG}
    else 
      git clone --branch ${ZFS_GIT_TAG} ${ZFS_GITHUB_REPO} ${ZFS_GIT_TAG}
    fi
  else
    echo "ZFS source tree already in place."
  fi
  popd

  pushd "${CACHE_DIR}/${ZFS_GIT_TAG}"
  if [ -n "${ZFS_GIT_CHERRY_PICK_COMMITS}" ]; then
    echo "Cherry-picking additional commits..."
    git config user.email "zefosator@build.system"
    git config user.name "Zefosator Build System"
    git stash || true
    for i in "${ZFS_GIT_CHERRY_PICK_COMMITS[@]}"
    do
      git cherry-pick "${i}"
    done
    git stash pop || true
  fi

  # easiest way to force ZFS use our version number for packages
  rm -rf "${CACHE_DIR}/${ZFS_GIT_TAG}/.git" || true

  if [ "${ENABLE_LICENSE_PATCH}" -eq 1 ]; then
    echo "Patching license..."
    sed -i "s/License:.*/License:       GPL v2/" META
  fi

  echo "Patching META version and release..."
  sed -i "s/Version:.*/Version:       ${ZFS_PKG_VERSION}/" META
  sed -i "s/Release:.*/Release:       ${ZFS_PKG_RELEASE}/" META

  echo "Patching META supported kernel version..."
  sed -i "s/Linux-Maximum:.*/Linux-Maximum: ${KRN_VERSION_MAJOR}.${KRN_VERSION_MINOR}/" META

  if [ ! -f "${ZFS_GIT_TAG}/Makefile" ]; then
    echo "Launching autogen..."
    sh autogen.sh
  fi

  echo "Configuring ZFS builtin build..."
  ./configure --enable-linux-builtin --with-linux="$(rpm --eval "%{_builddir}")/kernel-${KRN_VERSION}/linux-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}/"
  ./copy-builtin "$(rpm --eval "%{_builddir}")/kernel-${KRN_VERSION}/linux-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}/"
  popd
}

function build_zfs_rpms {
  set -e
  echo "Building ZFS RPM packages..."
  pushd "${CACHE_DIR}/${ZFS_GIT_TAG}"
  make -s -j8 rpm-utils
  popd
}

function move_zfs_rpms {
  set -e
  echo "Copying ZFS userspace packages to output dir..."
  pushd "${CACHE_DIR}/${ZFS_GIT_TAG}"
  for f in ./*.rpm; do 
    # filter for NON kmod-*.rpm
    if [[ ! "$f" =~ kmod-.*\.rpm ]]; then 
      cp -fv "$f" "${OUTPUT_DIR}/userspace/"
    fi
  done
  popd
}

function build_kernel_rpms {
  set -e
  echo "Preparing to build kernel packages..."
  pushd "$(rpm --eval "%{_builddir}")/kernel-${KRN_VERSION}"
  diff -uNrp "linux-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.orig" \
    "linux-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" \
    > "$(rpm --eval "%{_sourcedir}")/openzfs.patch" || true
  popd
  pushd "$(rpm --eval "%{_specdir}")"
  echo "Patching kernel RPM spec..."
  # Add "Patch1111: openzfs.patch" below "ApplyOptionalPatch linux-kernel-test.patch"
  sed -i '/Patch999999: linux-kernel-test.patch/a\Patch1111: openzfs.patch' kernel.spec
  # Add "ApplyOptionalPatch openzfs.patch" below "ApplyOptionalPatch linux-kernel-test.patch"
  sed -i '/ApplyOptionalPatch linux-kernel-test.patch/a\ApplyOptionalPatch openzfs.patch' kernel.spec
  # Add "Provides: zfs-kmod = 2.2.7\" below "Provides: kernel = %{specversion}-%{pkg_release}\"
  sed -i "/Provides: kernel = %{specversion}-%{pkg_release}/a\Provides: zfs-kmod = ${ZFS_PKG_VERSION}\\\\" kernel.spec
  echo "Building kernel packages..."
  rpmbuild -bb --with baseonly --without debuginfo --target=${KRN_ARCH} kernel.spec
  popd
}

function move_kernel_rpms {
  set -e
  echo "Copying kernel packages to output dir..."
  pushd "$(rpm --eval "%{_rpmdir}")/${KRN_ARCH}"
  for f in ./*.rpm; do 
    cp -fv "$f" ${OUTPUT_DIR}/kernel/
  done
  popd
}

function cleanup_zfs {
  set -e
  echo "Cleaning ZFS build dir..."
  rm -rf "${CACHE_DIR}/${ZFS_GIT_TAG}"
}

function cleanup_kernel {
  set -e
  echo "Cleaning kernel RPM build tree..."
  rm -rf $(rpm --eval "%{_builddir}")/*
  rm -rf $(rpm --eval "%{_sourcedir}")/*
  rm -rf $(rpm --eval "%{_srcrpmdir}")/*
  rm -rf $(rpm --eval "%{_specdir}")/*
  find $(rpm --eval "%{_rpmdir}") -name "*.rpm" | xargs rm -f
}

function update_repo {
  set -e
  # clean and regenerate repository metadata
  mkdir -p ${REPO_DIR}/repodata
  rm -f ${REPO_DIR}/repodata/*
  createrepo ${REPO_DIR}
}
