#!/usr/bin/env bash

function prepare_all {
  echo $KRN_VENDOR
  download_kernel_rpms

  pushd /cache/kernel-rpms || return 1
  if [ "$KRN_VENDOR" = "fedora" ] || [ "$KRN_VENDOR" = "kwizart" ]; then
    pkgfile=${KERNEL_DEVEL_PKG##*/}
    dnf install -y "${pkgfile}"
  elif [ "$KRN_VENDOR" = "almalinux9" ]; then
    pkgfile1=${KERNEL_DEVEL_PKG##*/}
    pkgfile2=${KERNEL_ABI_PKG##*/}
    dnf install -y "./${pkgfile1}" "./${pkgfile2}"
  elif [ "$KRN_VENDOR" = "almalinux8" ]; then
    pkgfile1=${KERNEL_DEVEL_PKG##*/}
    pkgfile2=${KERNEL_ABI_PKG##*/}
    dnf install -y "./${pkgfile1}" "./${pkgfile2}"
  fi
  popd || return 1

  mkdir -p /output/kernel
  mkdir -p /output/userspace
}

function build_zfs_rpms {
  pushd /cache || return 1
  if [ ! -d "${ZFS_GIT_TAG}" ]; then
    echo "Checking out ZFS sources..."
    if [ -z "${ZFS_GIT_CHERRY_PICK_COMMITS}" ]; then
      git clone --depth 1 --branch ${ZFS_GIT_TAG} ${ZFS_GITHUB_REPO} ${ZFS_GIT_TAG}
    else 
      git clone --branch ${ZFS_GIT_TAG} ${ZFS_GITHUB_REPO} ${ZFS_GIT_TAG}
    fi
  fi

  pushd "/cache/${ZFS_GIT_TAG}/rpm/generic" || return 1
  if [ "${ENABLE_SPEC_PATCH}" -eq 1 ]; then
    echo "Patching ZFS kmod RPM spec..."
    patch < /input/patches/zfs-kmod-spec.patch
  fi
  popd || return 1

  pushd "/cache/${ZFS_GIT_TAG}" || return 1

  if [ -n "${ZFS_GIT_CHERRY_PICK_COMMITS}" ]; then
    echo "Cherry-picking additional commits..."
    git config user.email "zefosator@build.system"
    git config user.name "Zefosator Build System"
    git stash || true
    for i in "${ZFS_GIT_CHERRY_PICK_COMMITS[@]}"
    do
      git cherry-pick "${i}"
    done
    git stash pop || true
  fi

  # easiest way to force ZFS use our version number for packages
  rm -rf "/cache/${ZFS_GIT_TAG}/.git" || true

  if [ "${ENABLE_LICENSE_PATCH}" -eq 1 ]; then
    echo "Patching license..."
    sed -i "s/License:.*/License:       GPL v2/" META
  fi

  echo "Patching META version and release..."
  sed -i "s/Version:.*/Version:       ${ZFS_PKG_VERSION}/" META
  sed -i "s/Release:.*/Release:       ${ZFS_PKG_RELEASE}/" META

  echo "Patching META supported kernel version..."
  sed -i "s/Linux-Maximum:.*/Linux-Maximum: ${KRN_VERSION_MAJOR}.${KRN_VERSION_MINOR}/" META

  if [ ! -f "${ZFS_GIT_TAG}/Makefile" ]; then
    echo "Launching autogen..."
    sh autogen.sh
  fi
  
  if [ "$KRN_VENDOR" = "fedora" ] || [ "$KRN_VENDOR" = "kwizart" ]; then
    echo "Configuring ZFS kmod build..."
    ./configure
  elif [ "$KRN_VENDOR" = "almalinux9" ] || [ "$KRN_VENDOR" = "almalinux8" ]; then
    echo "Configuring ZFS kABI-tracking kmod build..."
    # https://openzfs.github.io/openzfs-docs/Developer%20Resources/Custom%20Packages.html
    # kol kas kABI yra atjungtas ir mes kaip ir Fedora atveju buildinam paketus konkrečioms kernel versijoms
    ./configure
  fi

  echo "Building ZFS RPM packages..."
  make -s -j8 rpm-kmod rpm-utils

  popd || return 1
  popd || return 1
}

function move_zfs_rpms {
  pushd "/cache/${ZFS_GIT_TAG}" || return 1

  echo "Copying ZFS kmod packages to output dir..."
  # i kernel paketu output direktorija perkeliam kmod paketus  
  for f in ./*.rpm; do 
    # filtruojam kmod-*.rpm
    if [[ "$f" =~ kmod-.*  ]]; then 
      cp -nv "$f" /output/kernel/
    fi
  done

  echo "Copying ZFS userspace packages to output dir..."
  # i userspace paketu output direktorija perkeliam likusius paketus
  for f in ./*.rpm; do 
    # filtruojam NE kmod-*.rpm
    if [[ ! "$f" =~ kmod-.*\.rpm  ]]; then 
      cp -nv "$f" /output/userspace/
    fi
  done

  popd || return 1
}

function download_kernel_rpms {
  mkdir -p /cache/kernel-rpms
  pushd /cache/kernel-rpms || return 1

  echo "Downloading missing kernel packages..."
  # parsisiunciam RPM paketus, jei nera
  for i in "${KERNEL_PACKAGES[@]}"
  do
    pkgfile=${i##*/}
    if [ ! -f "$pkgfile" ]; then
      echo "Downloading: $pkgfile"
      if [ "$KRN_VENDOR" = "almalinux8" ]; then
        curl -LO "$i"
      else
        curl --no-progress-meter -LO "$i"
      fi
    fi
  done

  popd || return 1
}

function patch_kernel_meta_rpm {
  pushd /cache/kernel-rpms || return 1
  
  pkgfile=${KERNEL_META_PKG##*/}
  echo "Patching ${pkgfile} package requirements..."
  # pridedam kmod-zfs requirement i kernel.rpm SPEC
  # rezultatas yra modifikuotas RPM failas /cache/kernel-rpms/x86_64 direktorijoje
  if [ "$KRN_VENDOR" = "fedora" ] || [ "$KRN_VENDOR" = "kwizart" ]; then
    # Requires: kmod-zfs-6.8.10-200.fc39.x86_64
    rpmrebuild --directory=/cache/kernel-rpms \
      --change-spec-requires="cat - <(echo 'Requires: kmod-zfs-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH} >= ${ZFS_PKG_VERSION}')" \
      -p "/cache/kernel-rpms/${pkgfile}"
  elif [ "$KRN_VENDOR" = "almalinux9" ] || [ "$KRN_VENDOR" = "almalinux8" ]; then    
    # Requires: kmod-zfs-5.14.0-427.16.1.el9_4.x86_64
    rpmrebuild --directory=/cache/kernel-rpms \
      --change-spec-requires="cat - <(echo 'Requires: kmod-zfs-${KRN_VERSION}-${KRN_RELEASE}.el${OS_VERSION_MAJOR}_${OS_VERSION_MINOR}.${KRN_ARCH} >= ${ZFS_PKG_VERSION}')" \
      -p "/cache/kernel-rpms/${pkgfile}"
  fi

  popd || return 1
}


function move_kernel_rpms {
  echo "Copying kernel packages to output dir..."
  # padedam visus kernel paketus i savo repozitorija. kernel.rpm visada uzrasom, o likusius - praleidziam, jei jau yra.
  for i in "${KERNEL_PACKAGES[@]}"
  do
    pkgfile=${i##*/}
    cp -nv "/cache/kernel-rpms/$pkgfile" /output/kernel/
  done
  pkgfile=${KERNEL_META_PKG##*/}
  cp -fv "/cache/kernel-rpms/${KRN_ARCH}/${pkgfile}" /output/kernel/
}

function cleanup_zfs {
  echo "Cleaning ZFS build dir..."
  rm -rf "/cache/${ZFS_GIT_TAG}"
}

function cleanup_kernel {
  echo "Cleaning rebuilt kernel packages dir..."
  rm -rf "/cache/kernel-rpms/${KRN_ARCH}"
}

function update_repo {
  # regenerate repo metadata
  mkdir -p /repo/repodata  
  rm -f /repo/repodata/*
  createrepo /repo
}


