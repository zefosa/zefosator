#!/usr/bin/env bash

function create_variables_file {
  set +e
  read -r -d '' CNTVARS <<- __EOCNTVARS
		KRN_VERSION="${KRN_VERSION}"
		KRN_VERSION_MAJOR="${KRN_VERSION_MAJOR}"
		KRN_VERSION_MINOR="${KRN_VERSION_MINOR}"
		KRN_VERSION_PATCH="${KRN_VERSION_PATCH}"
		KRN_RELEASE="${KRN_RELEASE}"
		KRN_VENDOR="${KRN_VENDOR}"
		KRN_ARCH="${KRN_ARCH}"
		OS_VERSION="${OS_VERSION}"
		OS_VERSION_MAJOR="${OS_VERSION_MAJOR}"
		OS_VERSION_MINOR="${OS_VERSION_MINOR}"
		STANDARD_PACKAGES="${STANDARD_PACKAGES}"
		EXTRA_PACKAGES="${EXTRA_PACKAGES}"
		ZFS_GITHUB_REPO="${ZFS_GITHUB_REPO}"
		ZFS_GIT_TAG="${ZFS_GIT_TAG}"
		ZFS_GIT_CHERRY_PICK_COMMITS=(${ZFS_GIT_CHERRY_PICK_COMMITS})
		ZFS_PKG_RELEASE="${ZFS_PKG_RELEASE}"
		ZFS_PKG_VERSION="${ZFS_PKG_VERSION}"
		ENABLE_LICENSE_PATCH="${ENABLE_LICENSE_PATCH}"
		ENABLE_SPEC_PATCH="${ENABLE_SPEC_PATCH}"
		KERNEL_SRC_PKG="${KERNEL_SRC_PKG}"
		KERNEL_PKG_BASE_NAME="${KERNEL_PKG_BASE_NAME}"
		KERNEL_SRC_URL="${KERNEL_SRC_URL}"
__EOCNTVARS
  set -e
  echo "${CNTVARS}" > ./cache/variables
}

function build_image {
  # Dockerfile turinys paduodamas is kintamojo DF per STDIN
  # dockerfile sugeneruojamas i kintamaji DF
  set +e

  if [ "$KRN_VENDOR" = "fedora" ] || [ "$KRN_VENDOR" = "kwizart" ]; then
    read -r -d '' DF <<- __EODF
		FROM ${BASE_IMAGE_NAME} as base
		RUN mkdir /input
		RUN mkdir /cache
		RUN mkdir /output
		VOLUME [ "/input", "/cache", "/output", "/repo", "/build" ]
		RUN dnf install -y ${STANDARD_PACKAGES}
    RUN dnf install -y ${EXTRA_PACKAGES}
		WORKDIR /input
		ENTRYPOINT ["/input/entrypoint.sh"]
		CMD ["prepare", "zfs_rpms", "kernel_rpms", "cleanup"]
__EODF
  elif [ "$KRN_VENDOR" = "almalinux9" ]; then
    read -r -d '' DF <<- __EODF
		FROM ${BASE_IMAGE_NAME} as base
		RUN mkdir /input
		RUN mkdir /cache
		RUN mkdir /output
		VOLUME [ "/input", "/cache", "/output", "/repo", "/build" ]
		RUN dnf install -y ${STANDARD_PACKAGES}
		RUN dnf install -y --enablerepo=epel --enablerepo=crb ${EXTRA_PACKAGES}
		WORKDIR /input
		ENTRYPOINT ["/input/entrypoint.sh"]
		CMD ["prepare", "zfs_rpms", "kernel_rpms", "cleanup"]
__EODF
  elif [ "$KRN_VENDOR" = "almalinux8" ]; then
    read -r -d '' DF <<- __EODF
		FROM ${BASE_IMAGE_NAME} as base
		RUN mkdir /input
		RUN mkdir /cache
		RUN mkdir /output
		VOLUME [ "/input", "/cache", "/output", "/repo", "/build" ]
		RUN dnf install -y ${STANDARD_PACKAGES}
		RUN dnf install -y --enablerepo=epel --enablerepo=powertools ${EXTRA_PACKAGES}
		WORKDIR /input
		ENTRYPOINT ["/input/entrypoint.sh"]
		CMD ["prepare", "zfs_rpms", "kernel_rpms", "cleanup"]
__EODF
  fi

  set -e
  podman pull "${BASE_IMAGE_NAME}"
  echo "${DF}" | podman build --tag "${IMAGE_NAME}" -f -
}

function build_rpms_in_container {
  set -e
  #rm -rf ./output
  mkdir -p ./output/kernel
  mkdir -p ./output/userspace
# to mount /build for debugging purposes, replace --mount:
#    --volume "./build:/build:Z"
  docker run --rm --sig-proxy --interactive \
    --volume "./input:/input:Z" \
    --volume "./cache:/cache:Z" \
    --volume "./output:/output:Z" \
    --mount type=tmpfs,destination=/build \
    "${IMAGE_NAME}" cleanup prepare zfs_rpms kernel_rpms
}

function build_rpms_local {
  set -e
  #rm -rf ./output
  mkdir -p ./output/kernel
  mkdir -p ./output/userspace
  export INPUT_DIR=${PWD}/input
  export OUTPUT_DIR=${PWD}/output
  export CACHE_DIR=${PWD}/cache
  export BUILD_DIR=${PWD}/build
  ./input/entrypoint.sh cleanup prepare zfs_rpms kernel_rpms
}

function update_kernel_repo {
  set -e
  docker run --rm --sig-proxy --interactive \
    --volume "./input:/input:Z" \
    --volume "./cache:/cache:Z" \
    --volume "${KERNEL_REPO_DIR}/${KRN_ARCH}:/repo:Z" \
    "${IMAGE_NAME}" update_repo
}

function update_kernel_repo_local {
  set -e
  export INPUT_DIR=${PWD}/input
  export CACHE_DIR=${PWD}/cache
  export REPO_DIR=${KERNEL_REPO_DIR}/${KRN_ARCH}
  ./input/entrypoint.sh update_repo
}

function update_userspace_repo {
  set -e
  docker run --rm  --sig-proxy --interactive \
    --volume "./input:/input:Z" \
    --volume "./cache:/cache:Z" \
    --volume "${USERSPACE_REPO_DIR}/${KRN_ARCH}:/repo:Z" \
    "${IMAGE_NAME}" update_repo
}

function update_userspace_repo_local {
  set -e
  export INPUT_DIR=${PWD}/input
  export CACHE_DIR=${PWD}/cache
  export REPO_DIR=${USERSPACE_REPO_DIR}/${KRN_ARCH}
  ./input/entrypoint.sh update_repo
}

function copy_zfs_userspace_rpms_to_repos {
  set -e
  mkdir -p "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/"
  echo "Copying ZFS packages to repository..."
  if [ "$KRN_VENDOR" = "fedora" ]; then
    for f in ./output/userspace/*.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.rpm; do
      # copy everything except kmod, debuginfo, debugsource and .src.rpm
      if [[ ! "$f" =~ .*kmod.* && ! "$f" =~ .*test.* && ! "$f" =~ .*debug.* && ! "$f" =~ .*\.src\.rpm ]]; then
        cp -fv "$f" "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/" || true
      fi
    done
    for f in ./output/userspace/*.fc${OS_VERSION_MAJOR}.noarch.rpm; do
      if [[ ! "$f" =~ .*kmod.* && ! "$f" =~ .*test.* && ! "$f" =~ .*debug.* && ! "$f" =~ .*\.src\.rpm ]]; then
        cp -fv "$f" "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/" || true
      fi
    done
  elif [ "$KRN_VENDOR" = "almalinux9" ]; then
    for f in ./output/userspace/*.el${OS_VERSION_MAJOR}.${KRN_ARCH}.rpm; do
      # copy everything except kmod, debuginfo, debugsource and .src.rpm
      if [[ ! "$f" =~ .*kmod.* && ! "$f" =~ .*test.* && ! "$f" =~ .*debug.* && ! "$f" =~ .*\.src\.rpm ]]; then
        cp -fv "$f" "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/" || true
      fi
    done
    for f in ./output/userspace/*.el${OS_VERSION_MAJOR}.noarch.rpm; do
      # copy everything except kmod, debuginfo, debugsource and .src.rpm
      if [[ ! "$f" =~ .*kmod.* && ! "$f" =~ .*test.* && ! "$f" =~ .*debug.* && ! "$f" =~ .*\.src\.rpm ]]; then
        cp -fv "$f" "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/" || true
      fi
    done
  fi
}

function copy_kernel_rpms_to_repos {
  set -e
  mkdir -p "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/"
  echo "Copying kernel packages to repository..."
  if [ "$KRN_VENDOR" = "fedora" ]; then
    for f in ./output/kernel/*.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.rpm; do
      # copy everything except uki-virt
      if [[ ! "$f" =~ .*uki-virt.* ]]; then
        cp -fv "$f" "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/" || true
      fi
    done
  elif [ "$KRN_VENDOR" = "almalinux9" ]; then
    for f in ./output/kernel/*.el${OS_VERSION_MAJOR}.${KRN_ARCH}.rpm; do
      # copy everything except uki-virt
      if [[ ! "$f" =~ .*uki-virt.* ]]; then
        cp -fv "$f" "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/" || true
      fi
    done
  fi
}

function list_kernel_repo {
  echo "Latest packages in kernel repo (${KERNEL_REPO_DIR}/${KRN_ARCH})"
  ls -lth "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/" | head -n 20
}

function list_userspace_repo {
  echo "Latest packages in userspace repo (${USERSPACE_REPO_DIR}/${KRN_ARCH})"
  ls -lth "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/" | head -n 20
}

function zfs_snapshot {
  set -e
  if [ -n "${SNAP_DATASET}" ]; then 
    zfs snap "${SNAP_DATASET}@before-update-$(date +%Y%m%d)" || true
  fi
}

function install_kernel_with_zfs {
  set -e
  sudo dnf install "${KERNEL_PKG_BASE_NAME}-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" "${KERNEL_PKG_BASE_NAME}-modules-extra-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" "zfs-${ZFS_PKG_VERSION}" "python3-pyzfs-${ZFS_PKG_VERSION}" "zfs-dracut-${ZFS_PKG_VERSION}"
}

function list_initramfs_zfs {
  # initramfs visual inspection
  echo "ZFS related files in /boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img:"
  lsinitrd "/boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img" | grep "/zfs"
}

function list_versionlock {
  echo "Current version lock list:"
  dnf versionlock list
}

function print_kernel_changelog {
  echo "Latest 20 lines from installed kernel package changelog:"
  rpm -ql --changelog "${KERNEL_PKG_BASE_NAME}-core-${KRN_VERSION}" | head -n 20  
}

function update_initramfs {
  set -e
  dracut "/boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img" "${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" --force
}

function list_installed_kernels {
  echo "Listing of kernels installed in /boot:"
  ls -alth /boot/vmlinuz* /boot/initramfs*
}

