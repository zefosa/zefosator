#!/usr/bin/env bash

function create_variables_file {
  set +e
  read -r -d '' CNTVARS <<- __EOCNTVARS
		KRN_VERSION="${KRN_VERSION}"
		KRN_VERSION_MAJOR="${KRN_VERSION_MAJOR}"
		KRN_VERSION_MINOR="${KRN_VERSION_MINOR}"
		KRN_VERSION_PATCH="${KRN_VERSION_PATCH}"
		KRN_RELEASE="${KRN_RELEASE}"
		KRN_VENDOR="${KRN_VENDOR}"		
		KRN_ARCH="${KRN_ARCH}"
		OS_VERSION="${OS_VERSION}"
		OS_VERSION_MAJOR="${OS_VERSION_MAJOR}"
		OS_VERSION_MINOR="${OS_VERSION_MINOR}"
		STANDARD_PACKAGES="${STANDARD_PACKAGES}"
		EXTRA_PACKAGES="${EXTRA_PACKAGES}"
		ZFS_GITHUB_REPO="${ZFS_GITHUB_REPO}"
		ZFS_GIT_TAG="${ZFS_GIT_TAG}"
		ZFS_GIT_CHERRY_PICK_COMMITS=(${ZFS_GIT_CHERRY_PICK_COMMITS})
		ZFS_PKG_RELEASE="${ZFS_PKG_RELEASE}"
		ZFS_PKG_VERSION="${ZFS_PKG_VERSION}"
		ENABLE_LICENSE_PATCH="${ENABLE_LICENSE_PATCH}"
		ENABLE_SPEC_PATCH="${ENABLE_SPEC_PATCH}"
		KERNEL_DEVEL_PKG="${KERNEL_DEVEL_PKG}"
		KERNEL_META_PKG="${KERNEL_META_PKG}"
		KERNEL_ABI_PKG="${KERNEL_ABI_PKG}"
		KERNEL_PACKAGES=(${KERNEL_PACKAGES[*]})
		KERNEL_PKG_BASE_NAME="${KERNEL_PKG_BASE_NAME}"
__EOCNTVARS
  set -e
  echo "${CNTVARS}" > ./cache/variables
}

function build_image {
  # Dockerfile turinys paduodamas is kintamojo DF per STDIN
  # dockerfile sugeneruojamas i kintamaji DF
  set +e

  if [ "$KRN_VENDOR" = "fedora" ] || [ "$KRN_VENDOR" = "kwizart" ]; then
    read -r -d '' DF <<- __EODF
		FROM ${BASE_IMAGE_NAME} as base
		RUN mkdir /input
		RUN mkdir /cache
		RUN mkdir /output
		VOLUME [ "/input", "/cache", "/output", "/repo" ]
		RUN dnf install -y ${STANDARD_PACKAGES}
		WORKDIR /input
		ENTRYPOINT ["/input/entrypoint.sh"]
		CMD ["prepare", "zfs_rpms", "kernel_rpms", "cleanup"]
__EODF
  elif [ "$KRN_VENDOR" = "almalinux" ]; then
    read -r -d '' DF <<- __EODF
		FROM ${BASE_IMAGE_NAME} as base
		RUN mkdir /input
		RUN mkdir /cache
		RUN mkdir /output
		VOLUME [ "/input", "/cache", "/output", "/repo" ]
		RUN dnf install -y ${STANDARD_PACKAGES}
		RUN dnf install -y --enablerepo=epel --enablerepo=crb ${EXTRA_PACKAGES}
		WORKDIR /input
		ENTRYPOINT ["/input/entrypoint.sh"]
		CMD ["prepare", "zfs_rpms", "kernel_rpms", "cleanup"]
__EODF
  fi

  set -e
  echo "${DF}" | podman build --tag "${IMAGE_NAME}" -f -
}

function make_all_rpms {
  # output direktorija turi buti svari
  rm -rf ./output
  mkdir ./output
  docker run --rm --sig-proxy --interactive \
    --volume "./input:/input:Z" \
    --volume "./cache:/cache:Z" \
    --volume "./output:/output:Z" \
    "${IMAGE_NAME}" prepare zfs_rpms kernel_rpms cleanup
}

function update_kernel_repo {
  docker run --rm --sig-proxy --interactive \
    --volume "./input:/input:Z" \
    --volume "./cache:/cache:Z" \
    --volume "${KERNEL_REPO_DIR}/${KRN_ARCH}:/repo:Z" \
    "${IMAGE_NAME}" update_repo
}

function update_userspace_repo {
  docker run --rm  --sig-proxy --interactive \
    --volume "./input:/input:Z" \
    --volume "./cache:/cache:Z" \
    --volume "${USERSPACE_REPO_DIR}/${KRN_ARCH}:/repo:Z" \
    "${IMAGE_NAME}" update_repo
}

function copy_zfs_kmod_rpms_to_repos {
  mkdir -p "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/"
  # i repozitorijos direktorija kopijuojam aktualius paketus
  for f in ./output/kernel/*.rpm; do 
    # surandam visus kmod isskyrus devel ir debuginfo
    if [[ "$f" =~ .*kmod.* && ! "$f" =~ .*devel.* && ! "$f" =~ .*debug.* && ! "$f" =~ .*\.src\.rpm ]]; then 
      cp -nv "$f" "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/" || true
    fi
  done
}

function copy_zfs_userspace_rpms_to_repos {
  mkdir -p "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/"
  # i repozitorijos direktorija kopijuojam aktualius paketus
  for f in ./output/userspace/*.rpm; do 
    # surandam visus isskyrus kmod, debuginfo, debugsource ir .src.rpm
    if [[ ! "$f" =~ .*kmod.* && ! "$f" =~ .*test.* && ! "$f" =~ .*debug.* && ! "$f" =~ .*\.src\.rpm ]]; then  
      cp -nv "$f" "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/" || true
    fi
  done
}

function copy_kernel_rpms_to_repos {
  mkdir -p "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/"
  # padedam visus kernel paketus i savo repozitorija
  for i in "${KERNEL_PACKAGES[@]}"
  do
    pkgfile=${i##*/}
    cp -nv "./output/kernel/$pkgfile" "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/" || true
  done
}

function list_kernel_repo {
  echo "Packages in kernel repo (${KERNEL_REPO_DIR}/${KRN_ARCH})"
  ls -lth "${KERNEL_REPO_DIR}/${KRN_ARCH}/Packages/"
}

function list_userspace_repo {
  echo "Packages in userspace repo (${USERSPACE_REPO_DIR}/${KRN_ARCH})"
  ls -lth "${USERSPACE_REPO_DIR}/${KRN_ARCH}/Packages/"
}

function zfs_snapshot {
  if [ -n "${SNAP_DATASET}" ]; then 
    zfs snap "${SNAP_DATASET}@before-update-$(date +%Y%m%d)" || true
  fi
}

function install_kernel_with_zfs {
  dnf versionlock delete kernel kernel-core kernel-modules kernel-modules-extra kernel-longterm kernel-longterm-core kernel-longterm-modules kernel-longterm-modules-extra  
  sudo dnf upgrade "${KERNEL_PKG_BASE_NAME}-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" "${KERNEL_PKG_BASE_NAME}-modules-extra-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" "zfs-${ZFS_PKG_VERSION}" "python3-pyzfs-${ZFS_PKG_VERSION}" "zfs-dracut-${ZFS_PKG_VERSION}" "kmod-zfs-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}"
  dnf versionlock add kernel kernel-core kernel-modules kernel-modules-extra kernel-longterm kernel-longterm-core kernel-longterm-modules kernel-longterm-modules-extra
}

function list_initramfs_zfs {
  # initramfs vizualus patikrinimas
  echo "ZFS related files in /boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img:"
  lsinitrd "/boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img" | grep zfs
}

function list_versionlock {
  echo "Current version lock list:"
  dnf versionlock list
}

function print_kernel_changelog {
  echo "Latest 20 lines from installed kernel package changelog:"
  rpm -ql --changelog "${KERNEL_PKG_BASE_NAME}-core-${KRN_VERSION}" | head -n 20  
}

function update_initramfs {  
  sudo dracut "/boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img" "${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" --force
}

function list_installed_kernels {
  echo "Listing of kernels installed in /boot:"
  ls -alth /boot/vmlinuz* /boot/initramfs*
}

