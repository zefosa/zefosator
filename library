#!/usr/bin/env bash

function create_variables_file {
  set +e
  read -r -d '' CNTVARS <<- __EOCNTVARS
		KRN_VERSION="${KRN_VERSION}"
		KRN_SRCRPM_VERSION="${KRN_SRCRPM_VERSION}"
		KRN_VERSION_MAJOR="${KRN_VERSION_MAJOR}"
		KRN_VERSION_MINOR="${KRN_VERSION_MINOR}"
		KRN_VERSION_PATCH="${KRN_VERSION_PATCH}"
		KRN_RELEASE="${KRN_RELEASE}"
		KRN_VENDOR="${KRN_VENDOR}"
		KRN_ARCH="${KRN_ARCH}"
		OS_VERSION="${OS_VERSION}"
		OS_VERSION_MAJOR="${OS_VERSION_MAJOR}"
		OS_VERSION_MINOR="${OS_VERSION_MINOR}"
		STANDARD_PACKAGES="${STANDARD_PACKAGES}"
		EXTRA_PACKAGES="${EXTRA_PACKAGES}"
		ZFS_GITHUB_REPO="${ZFS_GITHUB_REPO}"
		ZFS_GIT_TAG="${ZFS_GIT_TAG}"
		ZFS_GIT_CHERRY_PICK_COMMITS=(${ZFS_GIT_CHERRY_PICK_COMMITS})
		ZFS_PKG_RELEASE="${ZFS_PKG_RELEASE}"
		ZFS_PKG_VERSION="${ZFS_PKG_VERSION}"
		ENABLE_LICENSE_PATCH="${ENABLE_LICENSE_PATCH}"
		ENABLE_SPEC_PATCH="${ENABLE_SPEC_PATCH}"
		KERNEL_SRC_PKG="${KERNEL_SRC_PKG}"
		KERNEL_PKG_BASE_NAME="${KERNEL_PKG_BASE_NAME}"
		KERNEL_SRC_URL="${KERNEL_SRC_URL}"
		KERNEL_TARBALL="${KERNEL_TARBALL}"
		KERNEL_TARBALL_URL="${KERNEL_TARBALL_URL}"
__EOCNTVARS
  set -e
  echo "${CNTVARS}" > ./input/variables
}

function build_image {
  # Dockerfile contents are generated into variable DF.
  # Dockerfile contents are passed from variable DF via STDIN.
  set +e

  if [ "$KRN_VENDOR" = "fedora" ] || [ "$KRN_VENDOR" = "zefosa" ]; then
    read -r -d '' DF <<- __EODF
		FROM ${BASE_IMAGE_NAME} as base
		RUN mkdir /input
		RUN mkdir /cache
		RUN mkdir /output
		VOLUME [ "/input", "/cache", "/output", "/build" ]
		RUN dnf install -y ${STANDARD_PACKAGES}
    RUN dnf install -y ${EXTRA_PACKAGES}
		WORKDIR /input
		ENTRYPOINT ["/input/entrypoint.sh"]
		CMD ["prepare", "zfs_rpms", "kernel_rpms", "cleanup"]
__EODF
  elif [ "$KRN_VENDOR" = "almalinux9" ]; then
    read -r -d '' DF <<- __EODF
		FROM ${BASE_IMAGE_NAME} as base
		RUN mkdir /input
		RUN mkdir /cache
		RUN mkdir /output
		VOLUME [ "/input", "/cache", "/output", "/build" ]
		RUN dnf install -y ${STANDARD_PACKAGES}
		RUN dnf install -y --enablerepo=epel --enablerepo=crb ${EXTRA_PACKAGES}
		WORKDIR /input
		ENTRYPOINT ["/input/entrypoint.sh"]
		CMD ["prepare", "zfs_rpms", "kernel_rpms", "cleanup"]
__EODF
  fi

  set -e
  podman pull "${BASE_IMAGE_NAME}"
  echo "${DF}" | podman build --layers --tag "${IMAGE_NAME}" -f -
}

function build_rpms_in_container {
  set -e
  #rm -rf ./output
  mkdir -p ./output/kernel
  mkdir -p ./output/userspace
# to mount /build for debugging purposes, add:
#    --volume "./build:/build:Z" \
# to speed up builds mount build as tmpfs:
#    --mount type=tmpfs,destination=/build
# to enable caching of downloaded artifacts:
#    --volume "./cache:/cache:Z" \
   podman run --rm --sig-proxy --interactive \
    --security-opt seccomp=unconfined \
    --volume "./input:/input:Z" \
    --volume "./output:/output:Z" \
    "${IMAGE_NAME}" cleanup prepare zfs_rpms kernel_rpms
}

function build_rpms_local {
  set -e
  #rm -rf ./output
  mkdir -p ./output/kernel
  mkdir -p ./output/userspace
  export INPUT_DIR=${PWD}/input
  export OUTPUT_DIR=${PWD}/output
  export CACHE_DIR=${PWD}/cache
  export BUILD_DIR=${PWD}/build
  ./input/entrypoint.sh cleanup prepare zfs_rpms kernel_rpms
}

function list_initramfs_zfs {
  # initramfs visual inspection
  echo "ZFS related files in /boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img:"
  lsinitrd "/boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.zfs.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img" | grep "/zfs"
}

function update_initramfs {
  set -e
  dracut "/boot/initramfs-${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}.img" "${KRN_VERSION}-${KRN_RELEASE}.fc${OS_VERSION_MAJOR}.${KRN_ARCH}" --force
}

function list_installed_kernels {
  echo "Listing of kernels installed in /boot:"
  ls -alth /boot/vmlinuz* /boot/initramfs*
}

